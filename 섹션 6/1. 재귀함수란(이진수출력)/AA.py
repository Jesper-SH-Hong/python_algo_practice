# 문제풀이 입장에선 3중,4중 for문의 유연성 있는 대체제

# n = 3
#
# def DFS(x):
#     if x>0:
#         # print(x)
#         # DFS(x - 1)  #3,2,1 출력
#
#
#         DFS(x-1)                #DFS(2)도 똑같은 작업하고 복귀주소는 D(3)의 11줄   # DFS(1)이 호출되면 똑같은 짓(복귀주소 D(2)의 11)
#         print(x)  #1,2,3 출력
#
#
# if __name__ == "__main__":
#     DFS(n)  # depth first search   -> 1)DFS(3)이 작동하면서 변수값,지역변수,함수,복귀주소(메인 16줄 해당 부분) 등 스택에 쌓음


# 10진수 n이 입력되면 2진수로 변환하여 출력하시오.

n = 11


def DFS(x):
    if x == 0:
        return  # 그냥 순수하게 함수 종료의 뜻
    else:
        # print(x % 2, end=' ')  이러면 1101 되니 stack이니까 30줄에 내리면 되지 않을까? 거꾸로 나올테니
        DFS(x // 2)
        print(x % 2, end=' ')   #


if __name__ == "__main__":
    DFS(n)

# |__D(0)->29__|   #하나씩 지워가면서 결과 반환
# |__D(1)->29__|
# |__D(2)->29__|
# |__D(5)->29__|
# |__D(11)->29_|   #29라인은 복귀주소


# 이상 스택