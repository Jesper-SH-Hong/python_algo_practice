

# 최단경로로 갈 경우 길이를 구하라.(최단거리라 BFS임!!!!!!!!!!!!!!!)

# dis는 거리 출발점은 0으로 초기화
# ch로 빠꾸 못하게 막아야.



from collections import deque

n = 7

ch = [[0] * n for _ in range(n)]
                                            #해당 좌표로 x번만큼에 갈 수 있따.
board = [                               # dis = [                                      (0,0)
    [0, 0, 0, 0, 0, 0, 0],               # [0, 1, 2, 3, 0, 0, 0],                   /  |    |   \
    [0, 1, 1, 1, 1, 1, 0],               # [1, 0, 0, 0, 0, 0, 0],                    (0,1) (1,0)     나머지 가지는 경계 오버
    [0, 0, 0, 1, 0, 0, 0],               # [2, 3, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 1, 1],               # [0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 0, 0],               # [0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 0, 0],               # [0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0]                # [0, 0, 0, 0, 0, 0, ?]    -> dis[6][6] 내놔라
]                                        # ]

dis = [[0] * n for _ in range(n)]


dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]


q = deque()
q.append((0,0))
board[0][0] = 1   #한번 방문한 곳 걍 벽으로 만드셈. 다시 이동 못하게 ㅋㅋ

# path =[(0, 0)]

while q:           #q가 비면 거짓이라 멈추겠지. 막혀서 ㅋㅋㅋ

    tmp = q.popleft()
    for i in range(4):
        x = tmp[0] + dx[i]
        y = tmp[1] + dy[i]
        if 0 <= x < 7 and 0 <= y < 7 and board[x][y] == 0:  #ch[x][y] == 0 and 안 쓰고 걍 라인 35에서 막아버림ㅋㅋ
            board[x][y] = 1   # 벽으로 바꾸자
            dis[x][y] = dis[tmp[0]][tmp[1]] + 1
            q.append((x, y))
            # path.append((x,y))   #path는 사과나무처럼 방문한 곳들을 뒤적일 뿐.. 절대거리를 보여주진 않음ㅋㅋㅋ dis[][] 깔아놓고 거기에 거리 표시했어야.   이 수식의 ㄱㄹ과는 path가 아니라 6,6까지에 0인 곳을 다 search할 뿐임..ㅋㅋㅋ

if dis[6][6] == 0:  #답이 존재 x
    print(-1)

else:
    print(dis[6][6])
    print(path)
