Queue 자료 구조(세차장):
FIFO. deque 사용

중복이 예민한 문제면.. deque로
아니면 sorting





req="CBA"

dq = deque(req)   #필수과목 넣기
print(dq)
deque(['C', 'B', 'A'])


dq.append("CBA")
print(dq)

deque(['C', 'B', 'A', 'CBA'])



# str1 = dict()
# str2 = dict()
#
# for x in a:
#     str1[x] = str1.get(x, 0) + 1  #str1 안에 x란 키가 없으면 디폴트인 0을 리턴, 거기에 +1, 있으면 그 키의 밸류를 리턴.  거기다 +1 누적하자 ㅋㅋ

#기존 딕셔너리에 없는 키도 이렇게 추가 가능 ㅇㅇ


=====================
def DFS1():
        cnt=3       #로컬 변수 생성
        print(cnt)  #3출력

def DFS2():
    if cnt==5:          #해결법: 위에 global cnt 추가
        cnt=cnt+1     #이 declare때문에 인터프리터는 DFS2의 모든 cnt를 local var로 인식, 바로 윗줄의 cnt가 먼저 declare되지 않았다고 에러냄.
        print(cnt) # 6 출력

if __name__ == "__main__":
    cnt=5
    DFS1()
    DFS2()
    print(cnt)  #6출력됨. 글로벌이었으니


=======================


#단 리스트는 다름
a[0]=7 이 라인은 인터프리터 번역 시 새로운 "로컬 리스트 생성이 아니라", 걍 애초에 a리스트의 값을 변경한다 뿐임.


def DFS():
        a[0]= 7    걍 전역 변수에 변경
        a = [7,8]     이건 로컬리스트 생성. 이렇게 이름이 바뀌어야
        print(a)    #[7,8]

def DFS2():
        a=a+[4]    이것도 리스트이름에 = 어싸인 하니까 "로컬리스트" 만들겠다라고 번역됨. +4에러 뜸... 로컬 a란 건 암것도 없으니..


if __name__ == "__main__":
    a=[1,2,3]
    DFS()
    print(a) #[1,2,3]

